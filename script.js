//alert('Привет, мой мир! Жыве Беларусь! \u0024'); /* перенёс из index.html */
/*выводит сообщение во всплывающем модальном окне*/


console.log('Hello, world!');  /*выводит сообщение в консоль*/

console.log(5 % 1); // 0 - остаток от деления левого числа на правое!
console.log(3 % 2); // 1

console.log(11 % 4); // 3 
console.log(12 % 4); // 0  - остаток от деления левого числа на правое!

console.log(70 + 20); // 90 - сложение, вычитание, умнож и деление - без кавычек))) - !
console.log(70 - 20);

console.log(4*4 - (5/2)*4); // 6 - Задача: За два рабочих дня программист Иннокентий успевает реализовать 
//на сайте одну новую задачу от заказчика. При этом у заказчика каждую неделю возникает 4 новые задачи.
// Выведите в консоль выражение, которое рассчитает количество нереализованных Иннокентием задач заказчика 
// за 4 недели. Считайте, что в каждой неделе по 5 рабочих дней.

console.log(20%3); // Трём верстальщикам нужно сверстать 20 макетов за спринт. Они решили разделить макеты
// поровну, чтобы каждый сделал одинаковое число макетов. Верстальщики эти вредные — никто из них не хочет 
// делать хоть на один макет больше другого. Выведите в консоль, сколько макетов останутся неподготовленными
// из-за вредности верстальщиков.

console.log(`\u03A9`) ; // Ω
console.log('\u0024'); // $
console.log("\u20AC"); // €

console.log(`
Это - шаблонная строка,
 и она может занимать 
 несколько строк
  `); 
  //Шаблонные строки ограничиваются с обеих сторон обратными кавычками ` .
// Шаблонные строки могут содержать переносы строки, а также
// содержать вычисляемые выражения внутри фигурных скобок со знаком доллара в начале ${...}:
 console.log(`${2 + 5} раз отмерь - ${9 - 8} отрежь`);  // "7 раз отмерь - 1 отрежь"
 
 console.log(`пяти` + `этажка`); // пятиэтажка
 console.log(`пяти`+`этажка`);   // пятиэтажка

 console.log(`Владивосток`+` `+`2000`); //Владивосток 2000
 console.log(`Владивосток `+2000);      ///Владивосток 2000

 console.log(`Первое произведение 
А.С. Пушкина было опубликовано 
в ${1799 + 12 + 3} году`); //шаблонные строки могут содержать вычисляемые выражения
                           // внутри фигурных скобок со знаком доллара в начале ${...}:

// Можно записать в переменную значение при объявлении, а можно — после него: 
let championOfTheWorld = 'Франция'; // можно сразу, со словом let

let olympicChampion;
olympicChampion = 'Великобритания'; // можно позже, тогда без let

olympicChampion = 'Бразилия'; // значение переменной можно изменить
console.log(olympicChampion); // Бразилия - cтарое значение из переменной пропадает — чемпион бывает только один.


let hours = 19; // Текущее время в часах
// Устанавливаем в магазине прогрессивную вечернюю скидку:
// С 6 до 9 часов вечера скидка растёт на 10% каждый час
let discount = 0;
if (hours >= 18 && hours <= 21) {
    discount = (hours - 17) * 10;
}
// Выводим сообщение о текущей скидке
console.log('После ' + hours + ':00 скидка в магазине ' + discount + '%');
// "После 19:00 скидка в магазине 20%" 
hours += 1; // прибавив к hours еще 1 час
if (hours >= 18 && hours <= 21) {
    discount = (hours - 17) * 10;
}
console.log('После ' + hours + ':00 скидка в магазине ' + discount + '%');
// После 20:00 скидка в магазине 30%

hours += 1; // прибавив к hours еще 1 час
if (hours >= 18 && hours <= 21) {
    discount = (hours - 17) * 10;
}
//Это интересно! В фигурных скобках внутри шаблонной строки ${...} можно писать любые выражения —
// в том числе содержащие переменные. Это позволяет использовать шаблонные строки вместо конкатенации:
console.log(`После ${hours}:00 скидка в магазине ${discount}%`); //

let fahrenheit = 451;
let celsius = (fahrenheit - 32) / 1.8; 
console.log(`'${fahrenheit} градуса по Фаренгейту - это ${celsius} градуса по Цельсию.' `)

console.log(` `);
//В логических вычислениях возможны два ответа: true (утверждение истинно) или false (утверждение ложно):
console.log(7 > 6); // true — больше
console.log(7 < 6); // false — меньше
console.log(7 >= 6); // true — больше или равно
console.log(7 <= 6); // false — меньше или равно
console.log(7 === 6); // false — проверка на равенство // важно:3 знака "="  !!!!!
console.log(7 !== 6); // true — проверка на неравенство 

console.log(` `);
console.log('казнить' === 'помиловать'); // false — это разные строки
console.log('казнить' !== 'помиловать'); // true
console.log('2' !== 2); // true — строка "2" не равна числу 2 

console.log(` `);
//Тело if — это код, который запускается, если значение условия — true. Пример: условная конструкция
// выводит в консоль весёлый смайлик, если значение переменной merry равно true.
let merry = true;     
if (merry) {    
    console.log('😃');
}// выведет в консоль 😃

console.log(` `);
// Если нужна реакция и на случай, когда условие ложно, то объявляют код с ключевым словом else. 
//Вот скрипт, который выводит весёлый смайлик, когда merry — true. В остальных случаях выводится 
//смайлик с нейтральным лицом.
merry = false;
if (merry) { 
    console.log('😃'); 
} else { 
    console.log('😐'); 
} //выведет в консоль:  😐

console.log(` `);
// Но мир не белый и чёрный, условий может быть больше. На случаи, не подходящие ни под if, ни под все
// остальные else, в JavaScript существует конструкция else if. Её синтаксис аналогичен правилам для 
// if, а её место — между телом if и телом else:
let teslaStockPrice = 644;
if (teslaStockPrice > 800) {
  console.log('Акцию пора продавать');
} else if (teslaStockPrice > 650) {
  console.log('Пока держим, пусть ещё подрастёт');
} else if (teslaStockPrice > 500) {
  console.log('Как дёшево, надо ещё докупить');
} else {
  console.log('Беру на все');
}// выведет в консоль "Как дёшево, надо ещё докупить"

console.log(` `);
//Логическое НЕ — отрицание, делает из истины ложь, а из лжи — истину. Записывается эта операция
// с помощью восклицательного знака !:
let merry1 = true;
console.log(!merry1); // false, тк  !истина = ложь

let christmas1 = false;
console.log(!christmas1); // true ,тк  !ложь = истина

console.log(` `);
//Логическое И вернёт истину только когда две булевы переменные истинны. Записывается эта операция
// с помощью двух амперсандов &&:
let merry2 = true;
let christmas2 = false;
console.log(merry2 && christmas2); // false = 0, те 1*0=0

console.log(` `);
//Логическое ИЛИ вернёт истину, когда хотя бы одно из булевых переменных истинно. Записывается эта
// операция с помощью двух прямых слешей ||:
let merry3 = true;
let christmas3 = false;
console.log(merry3 || christmas3); // true=1,  те 1+0=1

console.log(` `);
//Всё это позволяет записывать более сложные условия для инструкций if:
let temperature = 36.6;
if (temperature > 36.3 && temperature <= 37.1) {
    console.log(`Ваша температура ${temperature} в пределах нормы`);
} else {
    console.log(`Ваша температура ${temperature} Срочно обратитесь к врачу!`);
} 
// изменим температуру на 38.1:
temperature = 38.1;
if (temperature > 36.3 && temperature <= 37.1) {
    console.log(`Ваша температура ${temperature} в пределах нормы`);
} else {
    console.log(`Ваша температура ${temperature}. Срочно обратитесь к врачу!`);
} 

console.log(` `);
//Подставьте логический оператор === либо !== между операндами так, чтобы все выражения вернули значение false
console.log(7 !== 7);
console.log('aA' ===  'Aa');
console.log(((25 * 12 + 1) * 4) / 5 !==  (50 * 6 + 2 * 0.5) / 1.25);
console.log(` `);

//Сейчас в консоль выводится утверждение, что «2020 год — високосный». Добавьте условие if перед инструкцией console.log, чтобы утверждение не было голословным.
/*let year = 2021
if(year%4===0){
    console.log(year + ' год - високосный');
}
else {console.log(year + ' год - невисокосный');}

console.log(`222 `);
*/
let year = 1900;

if (year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0)) {
    console.log(year + ' год - високосный');
}
// допишите код здесь
else {
    console.log(year + ' год - невисокосный');
}
console.log (` `);


let months = ['Январь', 'Февраль', 'Март', 'Апрель', 'Май', 'Июнь', 'Июль', 'Август', 'Сентябрь', 'Октябрь', 'Ноябрь', 'Декабрь'];
// массив, в котором собраны все месяцы в году
console.log(months[1]); // 'Февраль'
console.log(months.length); // длина массива months 12
console.log (` `);


let morningList = ['Встать с кровати', 'Почистить зубы', 'Проверить сториз в Инстаграме',
    'Позавтракать']// Создайте массив
console.log(morningList); //Выведите получившийся массив в консоль. Встать с кровати
console.log(morningList[0]); // Выведите первый элемент
console.log(morningList[morningList.length-1]); // Выведите последний элемент Позавтракать
console.log (` `);


//Не меняя определение переменной morningList, выполните с массивом следующие действия:
// запишите на место третьего по счёту элемента строку Сделать зарядку,
// в конце массива добавьте новый элемент: Помыть посуду.
// Обращайтесь к элементам массива по индексу.
// Выведите результат в консоль.
let morningList1 = [
    'Встать с кровати',
    'Почистить зубы',
    'Проверить сториз в Инстаграме',
    'Позавтракать'];

// Допишите код здесь, не меняя определение массив
morningList1[2] = 'Сделать зарядку';
morningList1[morningList1.length] ='Помыть посуду'; //Если вместо номера элемента указать morningList.length, то новое значение запишется в конец массива.
console.log(morningList1);

//Следующий цикл напечатает все цифры от 1 до 10:
let j=1;
while (j<10) { //Цикл с неизвестным числом повторений while
j += 1;
    console.log(j);
}

console.log (` `);
//Следующий цикл напечатает все чётные цифры от 10 до 20:
let number = 10;

while (number <= 20) {
    console.log(number);
    number += 2;
}

console.log (` `);
for (let m = 0; m <= 10; m = m + 1) { //Цикл с известным числом повторений for
    console.log(m);
}

let numberS = 21;

do {
    console.log(numberS); // 21 - Значение numberS вывелось в консоль, несмотря на то, что 21 не меньше 20. С циклом while такое бы не сработало.
} while (numberS <= 20);



console.log (` `);
let morningList5 = [
    'Встать с кровати',
    'Почистить зубы',
    'Сделать зарядку',
    'Позавтракать',
    'Помыть посуду'
];
for (let k = 0; k < morningList5.length; k++) {  //let k = 0; k <= morningList5.length; k = k + 1
    console.log(morningList5[k]);
}

console.log (` `);
let z = 0
while (z < morningList5.length) {
    console.log(morningList5[z]);
    z += 1;
}
console.log (` `);

function consoleKitten() {
    let a = '  Λ _ Λ';
    let b = ' (=චᆽච=)==∫';
    let c = '   ˉ ˉ   ˉ ˉ';

    console.log(a);
    console.log(b);
    console.log(c);
}
//Функция рисования котёнка готова. Но котёнка в консоли пока не оказалось. Дело в том, что пока мы только описали функцию, но не запустили её. Чтобы тело функции выполнилось,
// функцию нужно вызывать. Для этого пишут её имя и затем ставят круглые скобки:
consoleKitten()

function keepScore(ours, theirs) {
    // Проверим, забили наши больше голов или нет:
    if (ours > theirs) {
        console.log('Выиграли! 😃 Счёт ' + ours + ':' + theirs);

        // Если наши забили не больше голов,
        // то может столько же? Проверим:
    } else if (ours === theirs) {
        console.log('Ничья. 😐 Счёт ' + ours + ':' + theirs);

        // Если два предыдущих условия не выполнены,
        // стало быть, наши забили меньше голов :(
    } else {
        console.log('Продули... 😢 Счёт ' + ours + ':' + theirs);
    }
}
keepScore(10, 2); // Выиграли! 😃 Счёт 10:2
keepScore(0,0); //   Ничья. 😐 Счёт 0:0
keepScore(1,3); //   Продули... 😢 Счёт 1:3

let a = 10;
let b = 8;
keepScore(a, b); //Выиграли! 😃 Счёт 10:8

//Возвращаемые значения указывает оператор return:
function sayHello(name) {
    // Преобразуем входные данные
    let greeting = 'Привет, ' + name;
    // Возвращаем результат
    return greeting; //В примере функция добавляет к строке 'Привет, ' параметр, который мы передаём при вызове ('Алиса').
                     // Получившаяся строка должна стать результатом работы функции. Об этом сообщает оператор return.
}
let x = sayHello('Дима');  //Когда функция вызвана, мы получаем этот результат и решаем, что с ним делать.
                                // В примере мы сначала записали его в переменную, а затем вывели в консоль.
console.log(x); // Привет, Дима

let y = sayHello('Алиса');
console.log(y); //Привет, Алиса

//Директива return означает выход из функции. В теле функции код ниже строки с оператором return не исполняется:
function sayHello2(name) {
    let greeting = 'Привет тебе мой друг, ' + name;
    return greeting;

    // этот код не выполнится,
    // так как он после return
    console.log(greeting);
}

console.log(sayHello2('Вася')); //Привет тебе мой друг, Вася


function sayHello3(name) {
    if (name === '') {
        return; // если имя — пустая строка, выйдем из функции
    }

    let greeting = 'Приветствую Вас, ' + name;
    return greeting;
}

console.log(sayHello3('Анна')); // Приветствую Вас, Анна

let emptyGreeting = sayHello3('');

console.log(emptyGreeting); // undefined -  Что такое undefined мы расскажем позже.


// Мы написали функцию-счётчик, которая увеличивает переменную counter при каждом вызове.
// Вызовите функцию три раза и выведите значение переменной counter в консоль.
let counter = 0;

function increaseCounter() {
    counter++;
}

// Вызовите функцию 3 раза
for (let i = 1; i <= 3; i = i + 1) {
    console.log(counter); // 0 1 2
    increaseCounter() // вызвали вункцию 3 раз и даже без параметров
}

let year2 = 2020;

if ((year2 % 400 === 0) || ((year2 % 4 === 0) && !(year2 % 100 === 0))) {
    console.log(year2 + ' год - високосный');
} else {
    console.log(year2 + ' год - невисокосный');
}

function isLeapYear(){  //Определите функцию под названием isLeapYear и перенесите весь код внутрь.
    let year2 = 2020;   // Это код проверки года на високосность из урока про условия.

    if ((year2 % 400 === 0) || ((year2 % 4 === 0) && !(year2 % 100 === 0))) {
        console.log(year2 + ' год - високосный');
    } else {
        console.log(year2 + ' год - невисокосный');
    }
}
////////////////////////////////////////
//В предыдущем задании вы описали функцию для проверки кода на високосность. В этом задании вам предстоит сделать её более универсальной.
// Чтобы функция могла проверять любой год на високосность, получая его как параметр.
// Удалите определение переменной year и добавьте параметр функции с таким же названием.
function isLeapYear(year3){  //Теперь функция стала универсальной и можно передавать любой год при вызове

    if ((year3 % 400 === 0) || ((year3 % 4 === 0) && !(year3 % 100 === 0))) {
        console.log(year3 + ' год - високосный');
    } else {
        console.log(year3 + ' год - невисокосный');
    }
}
//Вызовите функцию 3 раза с разными годами 2016, 2021, 2024:
isLeapYear(2016); //2016 год - високосный
isLeapYear(2021); //2021 год - невисокосный
isLeapYear(2024); //2024 год - високосный

/////////////////////////////////////////
console.log (` `);
//Функция проверяет год и выводит сообщение в консоль. Это неудачное решение, потому что нам
// может понадобиться это сообщение не только в консоли, но и где-то ещё.
// Замените все инструкции console.log внутри функции на return.
// Обратите внимание, что скобки для return не нужны.

function isLeapYear3(year3){


    if ((year3 % 400 === 0) || ((year3 % 4 === 0) && !(year3 % 100 === 0))) {
        return year3 + ' год - високосный';
    } else {
        return  year3 + ' год - невисокосный';
    }
}

isLeapYear3(2028); //функция вызывается, но сообщений в консоли больше нет, тк результат вызова пока никуда не идет

//Запишите результат вызова функции в переменную checkResult.
// Отобразите эту переменную во всплывающем окне с помощью alert, а также выведите в консоль.
let checkResult = isLeapYear3(2028);
//alert(checkResult); //Отобразите эту переменную во всплывающем окне браузера
console.log(checkResult);


///////////////   ОБЪЕКТЫ    /////////////////////
//  Создадим объект myObject с четырьмя ключами:
//  Пары «ключ — значение» делятся на два типа: свойства и методы.
//  Если значение представляет собой функцию, такую пару называют методом.
//      Если значение — строка, число, булево значение, массив или объект, такую пару называют свойством.

    let myObject = {
    stringKey: 'значение', // это свойство
    numberKey: 4, // это тоже свойство
    booleanKey: true, // и это свойство
    methodKey: function consoleKitten() { // а вот это метод
        console.log('kitten!');
    }
};
// Чтобы получить доступ к свойству, его имя записывают через точку после имени объекта:
myObject.stringKey;
// Другой способ обратиться к свойству — указать имя свойства в кавычках и в квадратных скобках:
myObject['numberKey'];

//Создайте переменную employee. Запишите в неё объект с полями:
// firstName — 'Василий'.
// secondName — 'Тёркин'.
// age — 28.
// Выведите объект в консоль.

let employee = {    //допишите код здесь
    firstName: 'Василий',
    secondName: 'Тёркин',
    age: 28,
};
console.log(employee);  //Выведет объект employee в консоль: { firstName: 'Василий', secondName: 'Тёркин', age: 28 }
//Напишите функцию getFullName, которая принимает на вход объект employee с двумя свойствами: firstName и secondName.
// Функция должна выводить в консоль новую строку: имя и фамилию сотрудника через пробел.
// После того как создадите функцию — вызовите её:
/*function getFullName(){
    console.log(employee.firstName + ' ' + employee.secondName)
}

getFullName(); //Василий Тёркин */

//Чтобы обратиться к свойству, запишите его имя через точку после имени объекта. Имя сотрудника — employee.firstName, фамилия — employee.secondName.
// Не забудьте добавить пробел при сложении строк.

//Замените console.log внутри функции getFullName на return — пусть функция возвращает значение вместо того, чтобы выводить его в консоль.
// Запишите результат вызова getFullName в поле fullName объекта employee и выведите весь объект целиком в консоль.

function getFullName(){
    return employee.firstName + ' ' + employee.secondName; //  функция  getFullName стала универсальной - ее результат работы можно использовать и в консоли и в модальном окне, и в интерфейсе.
}
employee.fullName = getFullName(employee);  // - Результат выполнения функции сделается свойством объекта employee

console.log(employee); //Выведет объект employee в консоль: { firstName: 'Василий', secondName: 'Тёркин', age: 28, fullName: 'Василий Тёркин' }